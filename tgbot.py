import base64
from Fusen_brain_ai import generate
from pyrogram import Client, filters
from pyrogram.types import ForceReply, ForceReply
import random
import json
import keyboards
import config



bot = Client(
    api_id=config.API_ID,
    api_hash=config.API_HASH,
    bot_token=config.BOT_TOKEN,
    name="my_bot"  # –£–∫–∞–∑—É–µ–º –ª—é–±–æ–µ))
)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—É—Å—Ç—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
def button_filter(button):
    async def func(_, __, msg):
        return msg.text == button.text
    return filters.create(func, "ButtonFilter", button=button)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã start
@bot.on_message(filters.command("start"))
async def start(bot, message):
    await message.reply('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üòä '
                        '–ú–µ–Ω—è –∑–æ–≤—É—Ç –†–æ–º–∞–Ω, –∏ —è —É—á—É—Å—å –≤ —à–∫–æ–ª–µ RTS. –†–∞–¥ –≤–∏–¥–µ—Ç—å –≤–∞—Å –∑–¥–µ—Å—å! üéì '
                        '–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–æ–π –ª–∏—á–Ω—ã–π Telegram-–ø–æ–º–æ—â–Ω–∏–∫ ‚Äî **FunBot**! ü§ñ‚ú® '
                        '–û–Ω –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å, —Ä–∞–∑–≤–ª–µ—á—å –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –∏–≥—Ä—ã. üéÆüé≤ '
                        '–ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –æ–±—â–µ–Ω–∏–µ–º —Å **FunBot**! üöÄ ', reply_markup=keyboards.kb_main)
    await bot.send_photo(message.chat.id, "images.jpg")

    with open("users.json", "r") as file:
        users = json.load(file)
    if str(message.from_user.id) not in users.keys():
        users[message.from_user.id] = 100
        with open("users.json", "w") as file:
            json.dump(users, file)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã info
@bot.on_message(filters.command("info") | button_filter((keyboards.btn_info)))
async def info(bot, message):
    await bot.send_message(message.chat.id ,'–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–∞—Ö, –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —Ç—É—Ç: start-—Å—Ç–∞—Ä—Ç –±–æ—Ç–∞, info-—É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ï—â—ë –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (help-–ø–æ–º–æ—â—å –≤ –∫–æ–º–∞–Ω–¥–∞—Ö.)')


@bot.on_message(filters.command("help"))
async def profile(bot, message):
    await bot.send_message(message.chat.id, "–ü—Ä–æ—Å—Ç–∏—Ç–µ –Ω–æ —ç—Ç–æ –µ—â—ë –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ....")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã send_stick
@bot.on_message(filters.command("send_stick"))
async def profile(bot, message):
    await bot.send_message(message.chat.id, "–ü—Ä–æ—Å—Ç–∏—Ç–µ –Ω–æ —ç—Ç–æ –µ—â—ë –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ....")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã profile
@bot.on_message(filters.command("profile") | button_filter(keyboards.btn_profile))
async def profile(bot, message):
    await bot.send_message(message.chat.id, "–ü—Ä–æ—Å—Ç–∏—Ç–µ –Ω–æ —ç—Ç–æ –µ—â—ë –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ....")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã games
@bot.on_message(filters.command("games") | button_filter(keyboards.btn_games))
async def games(bot, message):
    await message.reply("–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É", reply_markup=keyboards.kb_games)

    with open("users.json", "r") as file:
        users = json.load(file)
    if users[str(message.from_user.id)] >= 10:
        await message.reply("–¢–≤–æ–π —Ö–æ–¥!", reply_markup=keyboards.kb_games)
    else:
        await message.reply(f"–£ –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù–∞ —Ç–≤–æ–µ–º —Å—á–µ—Ç—É {users[str(message.from_user.ip)]}. "
                            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ 10")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã game –∏ –µ—ë —Ä–∞–±–æ—Ç—ã
@bot.on_message(filters.command("game") | button_filter(keyboards.btn_rps))
async def game(bot, message):
    await message.reply("–¢–≤–æ–π —Ö–æ–¥", reply_markup=keyboards.kb_game1)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞
@bot.on_message(button_filter(keyboards.btn_rock) | button_filter(keyboards.btn_scissors) | button_filter(keyboards.btn_paper))
async def choise_game1(bot, message):
    rock = keyboards.btn_rock.text
    scissors = keyboards.btn_scissors.text
    paper = keyboards.btn_paper.text
    user = message.text
    pc = random.choice([rock, scissors, paper])

    with open("users.json", "r") as file:
        users = json.load(file)

    if user == pc:
        await message.reply("–ù–ò–ß–¨–Ø!")
    elif (user == rock and pc == scissors) or (user == paper and pc == rock) or (user == scissors and pc == paper):
        await message.reply(f"–í–´ –ü–û–ë–ï–î–ò–õ–ò! –ë–æ—Ç –≤—ã–±—Ä–∞–ª {pc}", reply_markup=keyboards.kb_games)
        users[str(message.from_user.id)] += 10
    else:
        await message.reply(f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!–ë–æ—Ç –≤—ã–±—Ä–∞–ª {pc}", reply_markup=keyboards.kb_games)
        user[str(message.from_user.id)] -= 5

    with open("users.json", "w") as file:
        json.dump(users, file)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã back
@bot.on_message(filters.command("back") | button_filter(keyboards.btn_back))
async def back(bot, message):
    await message.reply("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboards.kb_main)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã back1
@bot.on_message(filters.command("back1") | button_filter(keyboards.btn_back1))
async def back1(bot, message):
    await message.reply("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã", reply_markup=keyboards.kb_games)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–≥—Ä—ã –≤ –∫–≤–µ—Å—Ç
@bot.on_message(filters.command("quest") | button_filter(keyboards.btn_quest))
async def quest(bot, message):
    await message.reply_text("–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ, –ø–æ–ª–Ω–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π –∏ –∑–∞–≥–∞–¥–æ–∫?", reply_markup=keyboards.inline_kb_start_quest)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å–ª–æ–≤–∏–π –∏–≥—Ä—ã –∫–≤–µ—Å—Ç
@bot.on_callback_query()
async def handle_query(bot, query):
    if query.data == 'start_quest':
        await bot.answer_callback_query(query.id, text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É –∫–≤–µ—Å—Ç!", show_alert=True)
        await query.message.reply_text("–¢—ã —Å—Ç–æ–∏—à—å –ø–µ—Ä–µ–¥ –¥–≤—É–º—è –¥–≤–µ—Ä—å–º–∏. –ö–∞–∫—É—é –∏–∑ –Ω–∏—Ö –≤—ã–±–µ—Ä–∏—à—å?", reply_markup=keyboards.inline_kb_choice)
    elif query.data == 'left_door':
        await  query.message.reply_text("–¢—ã –≤—Ö–æ–¥–∏—à—å –≤ –∫–æ–º–Ω–∞—Ç—É, –∏ –≤–∏–¥–∏—à—å –∑–ª–æ–≥–æ –¥—Ä–∞–∫–æ–Ω–∞! –£ —Ç–µ–±—è –µ—Å—Ç—å –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–µ–π—Å—Ç–≤–∏–π:", reply_markup=keyboards.inline_kb_left_door)
    elif query.data == 'right_door':
        await query.message.reply_text("–¢—ã –≤—Ö–æ–¥–∏—à—å –≤ –∫–æ–º–Ω–∞—Ç—É, –Ω–∞–ø–æ–ª–Ω–µ–Ω–Ω—É—é —Å–æ–∫—Ä–æ–≤–∏—â–∞–º–∏! –¢–µ–±–µ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–æ–∫—Ä–æ–≤–∏—â–µ", reply_markup=keyboards.inline_kb_right_door)
    elif query.data == 'dragon':
        await bot.answer_callback_query(query.id, text="–¢—ã —Å—Ä–∞–∂–∞–µ—à—å—Å—è —Å –¥—Ä–∞–∫–æ–Ω–æ–º, –Ω–æ –æ–Ω –æ–∫–∞–∑—ã–≤–∞–µ—Ç—å—Å—è —Å–ª–∏—à–∫–æ–º —Å–∏–ª—å–Ω—ã–º. –¢—ã –ø–æ–≥–∏–±–∞–µ—à—å", show_alert=True)
    elif query.data == 'run':
        await bot.answer_callback_query(query.id, text="–¢—ã –ø—ã—Ç–∞–µ—à—å—Å—è —É–±–µ–∂–∞—Ç—å, –Ω–æ –¥—Ä–∞–∫–æ–Ω –¥–æ–≥–æ–Ω—è–µ—Ç —Ç–µ–±—è –∏ —Å—ä–µ–¥–∞–µ—Ç!((", show_alert=True)
    elif query.data == 'gold_crown':
        await bot.answer_callback_query(query.id, text="–¢—ã –±–µ—Ä–µ—à—å –∑–æ–ª–æ—Ç—É—é –∫–æ—Ä–æ–Ω—É –∏ –≤—ã—Ö–æ–¥–∏—à—å –∏–∑ –∫–æ–º–Ω–∞—Ç—ã. –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –≤—ã–∏–≥—Ä–∞–ª –∏–≥—Ä—É", show_alert=True)
    elif query.data == 'netherite_dagger':
        await bot.answer_callback_query(query.id, text="–¢—ã –±–µ—Ä–µ—à—å –º–µ—á, –ø–æ–∫—Ä—ã—Ç —Å–ø–ª–∞–≤–æ–º –Ω–µ–∑–µ—Ä–∏—Ç–∞, —Å–ª–∏—Ç–∫–æ–º –º–µ—Ç–∞–ª–∞ –∏–∑ –¥—Ä—É–≥–æ–≥–æ –∏–∑–º–∏—Ä–µ–Ω–∏—è!", show_alert=True)
        await query.message.reply_text("–ß—Ç–æ-–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–µ—á–æ–º, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Å—Ç–æ—Ä–æ–Ω—É: –î–æ–±—Ä–æ –∏–ª–∏ –ó–ª–æ!", reply_markup=keyboards.inline_kb_dark_and_light)
    elif query.data == 'dark_and_light':
        await bot.answer_callback_query(query.id, text="–ß—Ç–æ-–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–µ—á–æ–º, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Å—Ç–æ—Ä–æ–Ω—É: –î–æ–±—Ä–æ –∏–ª–∏ –ó–ª–æ!", show_alert=True)
    elif query.data == 'light':
        await bot.answer_callback_query(query.id, text="–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–æ–±—Ä–æ! –í—ã –≤–∑—è–ª–∏ –º–µ—á, –∏ –ø–æ—à–ª–∏ –∫ —Å–≤–æ–µ–º—É –∫–æ—Ä–æ–ª—é, –≥–¥–µ —Å –ø–æ–º–æ—â—å—é –¥–æ–±—Ä–æ–π –º–∞–≥–∏–∏ –∑–∞—â–∏—â–∞–µ—Ç–µ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–æ –æ—Ç –∑–ª–æ–±–Ω—ã—Ö –≤–∞—Ä–≤–∞—Ä–æ–≤! –ü–æ—Å–ª–µ –ø–æ –±–µ–¥—ã –≤—ã —Å—Ç–∞—ë—Ç–µ –Ω–æ–≤—ã–º –∫–æ—Ä–æ–ª—å–æ–º –∏ –≤–∞—à–µ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ –ø—Ä–æ—Ü–≤–µ—Ç–∞–µ—Ç!", show_alert=True)
    elif query.data == 'dark':
        await bot.answer_callback_query(query.id, text="–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–ª–æ! –í—ã –≤–∑—è–ª–∏ –º–µ—á, –∏ –ø–æ—à–ª–∏ –∫ —Å–≤–æ–µ–º—É –∫–æ—Ä–æ–ª—é, –∏ –≤–∞—Å –Ω–∞—á–∞–ª–∞ –ø–æ–≥–ª–∞—â–∞—Ç—å —Ç—å–º–∞, –≤—ã —É–±–±–∏–≤–∞–µ—Ç–µ –∫–æ—Ä–æ–ª—è –∏ –≤—Å–µ –∫–æ—Ä–æ–ª–µ—Å—Ç–≤–æ —Å—Ç–∞—ë—Ç –≤–∞—à–∏–º! –ù–æ –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤–∞—Å –±—ã—Å—Ç—Ä–æ –ø–æ–≥–ª–æ—â–∞–µ—Ç —Ç—å–º–∞ –∏ –≤—ã —É–º–∏—Ä–∞–µ—Ç–µ!", show_alert=True)
    elif query.data == 'silver_dagger':
        await bot.answer_callback_query(query.id, text="–¢—ã –±–µ—Ä–µ—à—å —Å–µ—Ä–µ–±—Ä—è–Ω–Ω–∏–π –∫–∏–Ω–∂–∞–ª –∏ –≤—ã—Ö–æ–¥–∏—à—å –∏–∑ –∫–æ–º–Ω–∞—Ç—ã. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–∏–Ω–∂–∞–ª –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ç–æ–∏—Ç", show_alert=True)
    elif query.data == 'old_book':
        await bot.answer_callback_query(query.id, text="–¢—ã –±–µ—Ä–µ—à—å —Å—Ç–∞—Ä—É—é –∫–Ω–∏–≥—É –∏ –≤—ã—Ö–æ–¥–∏—à—å –∏–∑ –∫–æ–º–Ω–∞—Ç—ã. –ö–Ω–∏–≥–∞ –æ–∫–∞–∑—ã–≤–∞–µ—Ç—å—Å—è –º–∞–≥–∏—á–µ—Å–∫–æ–π! –¢—ã –æ—Ç–∫—Ä—ã–≤–∞–µ—à—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ —è–≤–ª—è–µ—à—Å—è –≤ –¥—Ä—É–≥—É–æ–º –∏–∑–º–µ—Ä–µ–Ω–∏–∏ –≥–¥–µ –≤–∏–¥–µ—à—å....", show_alert=True)


query_text = '–í–≤–µ–¥–∏ –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
@bot.on_message(button_filter(keyboards.btn_generate))
async def image(bot, message):
    await message.reply(query_text, reply_markup=ForceReply(True))

@bot.on_message(filters.reply)
async def reply(bot, message):
    if message.reply_to_message.text == query_text:
        query = message.text
        await message.reply_text(f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}', –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ....")
        image = await generate(query)
        if image:
            image_data = base64.b64decode(image[0])
            with open(f'images/image.jpg', "wb") as file:
                file.write(image_data)
            await bot.send_photo(message.chat.id, f'images/image.jpg', reply_to_message_id=message.id)
        else:
            await message.reply_text("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞,  –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑", reply_to_message_id=message.id)

    else:
        await message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å: ")

bot.run()




